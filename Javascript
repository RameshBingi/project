
const table = new Tabulator("#task-table", {
    height: "500px",
    layout: "fitColumns",
    columns: [
        { title: "Task ID", field: "id", width: 100 },
        { title: "Title", field: "title", editor: "input" },
        { title: "Description", field: "description", editor: "input" },
        { title: "Status", field: "status", editor: "select", editorParams: {
            values: {
                "To Do": "To Do",
                "In Progress": "In Progress",
                "Done": "Done"
            }
        }},
        { title: "Actions", field: "actions", formatter: deleteButton, width: 150 }
    ],
});


function deleteButton(cell) {
    return "<button class='btn btn-danger btn-sm delete-btn'>Delete</button>";
}


function fetchData() {
    fetch("https://jsonplaceholder.typicode.com/todos")
        .then(response => response.json())
        .then(data => {
            const tasks = data.slice(0, 20).map(task => ({
                id: task.id,
                title: task.title,
                description: "No description",
                status: task.completed ? "Done" : "To Do"
            }));
            table.setData(tasks);
        })
        .catch(error => console.error("Error fetching data:", error));
}


document.getElementById("addTaskBtn").addEventListener("click", function() {
    const taskId = prompt("Enter Task ID:");
    const title = prompt("Enter Task Title:");
    const description = prompt("Enter Task Description:");
    const status = prompt("Enter Task Status (To Do, In Progress, Done):");

    if (taskId && title && description && (status === "To Do" || status === "In Progress" || status === "Done")) {
        const newTask = {
            id: parseInt(taskId),
            title: title,
            description: description,
            status: status
        };
        table.addData([newTask]);
        showToast("Task added successfully!");
    } else {
        showToast("Please provide valid inputs for all fields.");
    }
});


table.on("cellClick", function(e, cell) {
    if (e.target.classList.contains("delete-btn")) {
        const row = cell.getRow();
        row.delete();
        showToast("Task deleted successfully!");
    }
});

document.getElementById("statusFilter").addEventListener("change", function() {
    const filterValue = this.value;
    table.setFilter("status", "like", filterValue);
});


document.getElementById("search").addEventListener("input", function() {
    const searchValue = this.value;
    table.setFilter([
        { field: "title", type: "like", value: searchValue },
        { field: "description", type: "like", value: searchValue }
    ]);
});


function showToast(message) {
    const toast = document.getElementById("toast");
    toast.querySelector(".toast-body").innerText = message;
    toast.style.display = "block";
    setTimeout(() => {
        toast.style.display = "none";
    }, 3000);
}


fetchData();
